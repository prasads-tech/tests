- name: Commit and Push Manifests
  env:
    PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  run: |
    git config --global user.name "your-username"
    git config --global user.email "your-email@example.com"
    git add ${{ env.OUTPUT_DIR }}/*
    if git diff-index --quiet HEAD --; then
      echo "No changes to commit."
    else
      git commit -m "generated manifests"
      git push https://x-access-token:${{ env.PAT_TOKEN }}@github.com/<your-username>/<your-repo>.git HEAD:main
    fi


name: Automation Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'Clusters-Dev/AKS/Input/*.json'

jobs:
  generate_manifests:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ secrets.OUTPUT_DIR }}
      INPUT_PATH: ${{ secrets.INPUT_PATH }}
      MAPPING_PATH: ${{ secrets.MAPPING_PATH }}
      TEMPLATE_PATH: ${{ secrets.TEMPLATE_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.7'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run main script
        run: |
          python Automation/AKS/Workload-Cluster/main.py \
            --input ${{ env.INPUT_PATH }} \
            --mapping ${{ env.MAPPING_PATH }} \
            --template ${{ env.TEMPLATE_PATH }}

      - name: Commit and Push Manifests
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add ${{ env.OUTPUT_DIR }}/*
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Add generated manifests"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}






name: Automation Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'Clusters-Dev/AKS/Input/*.json'

jobs:
  generate_manifests:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: "./Clusters-Dev/AKS/Workload"
      INPUT_PATH: "./Clusters-Dev/AKS/Input/input.json"
      MAPPING_PATH: "./Cluster-artifacts/Templates/FieldMapping.json"
      TEMPLATE_PATH: "./Cluster-artifacts/Templates/AKS-templates01.yaml"
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run main script
        run: |
          python Automation/AKS/Workload-Cluster/main.py \
            --input ${{ env.INPUT_PATH }} \
            --mapping ${{ env.MAPPING_PATH }} \
            --template ${{ env.TEMPLATE_PATH }}

      - name: Commit and Push Manifests
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add ${{ env.OUTPUT_DIR }}/*
          git commit -m "Add generated manifests"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}






- name: List folders in Myone
        id: list_folders
        run: |
          # List all directories inside the Myone folder
          FOLDERS=$(ls -d Myone/*/)
          echo "Detected folders: $FOLDERS"
          
          # Get the name of the latest added folder by modification time
          NEW_FOLDER=$(ls -dt Myone/*/ | head -n 1)
          NEW_FOLDER_NAME=$(basename "$NEW_FOLDER")
          echo "Newly added folder: $NEW_FOLDER_NAME"

          # Set the output variable for GitHub Actions
          echo "new_folder_name=$NEW_FOLDER_NAME" >> $GITHUB_OUTPUT

      - name: Output the newly added folder name
        run: |
          echo "The newly added folder is: ${{ steps.list_folders.outputs.new_folder_name }}"



name: Detect New Folder in Workload

on:
  push:
    paths:
      - 'Clusters-Dev/AKS/Workload/**'  # This triggers the workflow on changes in the specified path

jobs:
  detect-new-folder:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List new folders
        run: |
          # Get the previous and current commit hashes from the GitHub context
          BEFORE_COMMIT=${{ github.event.before }}
          AFTER_COMMIT=${{ github.sha }}

          # List all directories in Clusters-Dev/AKS/Workload that were added
          NEW_FOLDERS=$(git diff --name-status $BEFORE_COMMIT $AFTER_COMMIT | grep 'Clusters-Dev/AKS/Workload/' | awk '/^A/{print $2}' | xargs -I {} basename {})

          # Print the names of the new folders
          if [ -z "$NEW_FOLDERS" ]; then
            echo "No new folders detected."
          else
            echo "New folders detected:"
            echo "$NEW_FOLDERS"
          fi






name: Detect New Folder in Workload

on:
  push:
    paths:
      - 'Clusters-Dev/AKS/Workload/**'  # This triggers the workflow on changes in the specified path

jobs:
  detect-new-folder:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List new folders
        run: |
          # List all directories in Clusters-Dev/AKS/Workload
          NEW_FOLDERS=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }} | grep 'Clusters-Dev/AKS/Workload/' | awk '/^A/{print $2}' | xargs -I {} basename {})

          # Print the names of the new folders
          if [ -z "$NEW_FOLDERS" ]; then
            echo "No new folders detected."
          else
            echo "New folders detected:"
            echo "$NEW_FOLDERS"
          fi






name: Detect and Print New Folder

on:
  push:
    paths:
      - 'Clusters-Dev/AKS/Workload/**'  # This will trigger the workflow for any changes under this path

jobs:
  print-new-folder:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Find and print new folder
        run: |
          # List all the directories in 'Clusters-Dev/AKS/Workload' and store them
          CURRENT_FOLDERS=$(ls Clusters-Dev/AKS/Workload)

          # Get the latest commit that modified 'Clusters-Dev/AKS/Workload'
          LATEST_COMMIT=$(git log -1 --format=format:%H --full-diff Clusters-Dev/AKS/Workload)

          # List directories added in the latest commit
          NEW_FOLDERS=$(git diff-tree --no-commit-id --name-status -r $LATEST_COMMIT | grep 'A' | grep 'Clusters-Dev/AKS/Workload/' | cut -f2 | cut -d'/' -f4)

          if [ -z "$NEW_FOLDERS" ]; then
            echo "No new folders added."
          else
            for FOLDER in $NEW_FOLDERS; do
              echo "New folder detected: $FOLDER"
            done
          fi

- name: Find and print new folder
        run: |
          # Check if this is the first commit
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "This is the first commit; no previous commits to compare."
          else
            # Get the list of newly added folders
            NEW_FOLDERS=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | grep 'Clusters-Dev/AKS/Workload/' | cut -d'/' -f2 | sort -u)
            
            if [ -z "$NEW_FOLDERS" ]; then
              echo "No new folders added."
            else
              for FOLDER in $NEW_FOLDERS; do
                echo "New folder detected: $FOLDER"
              done
            fi
          fi






- name: Find and print new folder
        run: |
          # Get the list of newly added folders
          NEW_FOLDERS=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | grep 'main-folder/' | cut -d'/' -f2 | sort -u)
          
          if [ -z "$NEW_FOLDERS" ]; then
            echo "No new folders added."
          else
            for FOLDER in $NEW_FOLDERS; do
              echo "New folder detected: $FOLDER"
            done
          fi







name: Trigger Pipeline on Folder Creation

on:
  push:
    paths:
      - 'Clusters-Dev/**' # Adjust the path pattern based on where new folders will be created

jobs:
  detect-new-folder:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find new folders
        id: find_folders
        run: |
          git fetch origin main
          new_folders=$(git diff --name-status HEAD^ HEAD | grep '^A.*\/$' | awk '{print $2}')
          echo "Found folders: $new_folders"
          echo "new_folders=$new_folders" >> $GITHUB_ENV

      - name: Check if new folders are created
        if: ${{ env.new_folders != '' }}
        run: |
          echo "New folder(s) detected: ${{ env.new_folders }}"

      - name: Parse folder name and run pipeline
        if: ${{ env.new_folders != '' }}
        run: |
          for folder in ${{ env.new_folders }}; do
            folder_name=$(basename $folder)
            echo "Processing folder: $folder_name"
            # Run your pipeline or script here, passing folder_name as an argument or environment variable
            # For example: ./run_pipeline.sh $folder_name
          done
