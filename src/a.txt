# Step 1: Create JWT Header and Payload
HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
PAYLOAD=$(echo -n '{"iat":'$(date +%s)',"exp":'$(($(date +%s) + 600))',"iss":"'"${GITHUB_APP_ID}"'"}' | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')

# Step 2: Write the private key to a file
echo "$GITHUB_APP_PRIVATE_KEY" > private_key.pem

# Step 3: Generate the JWT signature using the private key
JWT_SIGNATURE=$(echo -n "${HEADER}.${PAYLOAD}" | openssl dgst -sha256 -sign private_key.pem | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')

# Step 4: Create the full JWT
JWT="${HEADER}.${PAYLOAD}.${JWT_SIGNATURE}"

# Output the JWT to GitHub environment
echo "JWT=${JWT}" >> $GITHUB_ENV



name: Run Python Script and Create PR

on:
  push:
    branches:
      - main

jobs:
  run-python-and-create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Script
        run: python your_script.py  # Replace with your Python script

      - name: Generate JWT for GitHub App
        env:
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
        run: |
          # Step 1: Create JWT Header and Payload
          HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 | tr -d '=' | tr '/+' '_-')
          PAYLOAD=$(echo -n '{"iat":'$(date +%s)',"exp":'$(($(date +%s) + 600))',"iss":"'"${GITHUB_APP_ID}"'"}' | openssl base64 | tr -d '=' | tr '/+' '_-')

          # Step 2: Write the private key to a file
          echo "$GITHUB_APP_PRIVATE_KEY" > private_key.pem

          # Step 3: Generate the JWT signature using the private key
          JWT_SIGNATURE=$(echo -n "${HEADER}.${PAYLOAD}" | openssl dgst -sha256 -sign private_key.pem | openssl base64 | tr -d '=' | tr '/+' '_-')

          # Step 4: Create the full JWT
          JWT="${HEADER}.${PAYLOAD}.${JWT_SIGNATURE}"
          echo "JWT=${JWT}" >> $GITHUB_ENV

      - name: Get GitHub Installation Access Token
        env:
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_INSTALLATION_ID: ${{ secrets.GITHUB_INSTALLATION_ID }}
          JWT: ${{ env.JWT }}
        run: |
          INSTALLATION_TOKEN=$(curl -X POST \
            -H "Authorization: Bearer ${JWT}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/app/installations/${GITHUB_INSTALLATION_ID}/access_tokens \
            | jq -r .token)
          echo "ACCESS_TOKEN=${INSTALLATION_TOKEN}" >> $GITHUB_ENV

      - name: Commit and Push Changes
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          # Create a new branch
          BRANCH_NAME="auto-update-branch-$(date +%s)"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -b $BRANCH_NAME
          git add .
          git commit -m "Automated commit from GitHub Actions"
          git push https://x-access-token:${ACCESS_TOKEN}@github.com/${{ github.repository }} $BRANCH_NAME

      - name: Create a Pull Request
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          PR_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"Automated PR","head":"'"$BRANCH_NAME"'","base":"main"}')
          echo $PR_RESPONSE




name: Run Python and Create PR

on:
  push:
    branches:
      - main

jobs:
  run-python-and-create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Script
        run: python your_script.py  # Replace with your Python script
      
      - name: Generate JWT for GitHub App
        env:
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
        run: |
          # Step 1: Create JWT Header and Payload
          HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | openssl base64 | tr -d '=' | tr '/+' '_-')
          PAYLOAD=$(echo -n '{"iat":'$(date +%s)',"exp":'$(($(date +%s) + 600))',"iss":"'"${GITHUB_APP_ID}"'"}' | openssl base64 | tr -d '=' | tr '/+' '_-')
          
          # Step 2: Create the JWT
          JWT_TOKEN=$(echo -n "${HEADER}.${PAYLOAD}" | openssl dgst -sha256 -sign <(echo "$GITHUB_APP_PRIVATE_KEY" | base64 -d) | openssl base64 | tr -d '=' | tr '/+' '_-')
          JWT="${HEADER}.${PAYLOAD}.${JWT_TOKEN}"

      - name: Get GitHub Installation Access Token
        env:
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_INSTALLATION_ID: ${{ secrets.GITHUB_INSTALLATION_ID }}
        run: |
          INSTALLATION_TOKEN=$(curl -X POST \
            -H "Authorization: Bearer ${JWT}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/app/installations/${GITHUB_INSTALLATION_ID}/access_tokens \
            | jq -r .token)
          echo "ACCESS_TOKEN=${INSTALLATION_TOKEN}" >> $GITHUB_ENV

      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Fallback for any further operations
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          # Create a new branch
          BRANCH_NAME="auto-update-branch-$(date +%s)"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git checkout -b $BRANCH_NAME
          git add .
          git commit -m "Automated commit from GitHub Actions"
          git push https://x-access-token:${ACCESS_TOKEN}@github.com/${{ github.repository }} $BRANCH_NAME
          
      - name: Create a Pull Request
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          PR_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"Automated PR","head":"'"$BRANCH_NAME"'","base":"main"}')
          echo $PR_RESPONSE


name: Automation

on:
  push:
    branches:
      - main
    paths:
      - "Clusters-Dev/AKS/Input/*.json"

permissions:
  contents: write
  pull-requests: write

jobs:
  trigger_on:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ secrets.OUTPUT_DIR }}
      GITHUB_APP_ID: "${{ secrets.VAM_G_APP_ID }}"
      GITHUB_APP_PRIVATE_KEY: "${{ secrets.VAM_G_PRIVATE_KEY }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Find JSON files
        id: find-json
        run: |
          json_files=$(find Clusters-Dev/AKS/Input/ -name '*.json')
          if [ -z "$json_files" ]; then
            echo "No JSON files found."
            exit 1
          fi
          branch_name=$(basename "$json_files" .json)
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
          echo "$json_files" > files.txt

      - name: Generate JWT for GitHub App Authentication
        id: generate-jwt
        run: |
          PRIVATE_KEY=$(echo "${{ secrets.VAM_G_PRIVATE_KEY }}" | sed 's/\\n/\n/g')
          APP_ID="${{ secrets.VAM_G_APP_ID }}"
          CURRENT_TIME=$(date +%s)
          EXPIRY_TIME=$((CURRENT_TIME + 600)) # JWT valid for 10 minutes
          HEADER='{"alg": "RS256", "typ": "JWT"}'
          PAYLOAD="{\"iat\": ${CURRENT_TIME}, \"exp\": ${EXPIRY_TIME}, \"iss\": \"${APP_ID}\"}"
          HEADER_BASE64=$(echo -n "$HEADER" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          PAYLOAD_BASE64=$(echo -n "$PAYLOAD" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          SIGNATURE=$(echo -n "${HEADER_BASE64}.${PAYLOAD_BASE64}" | openssl dgst -sha256 -sign <(echo -n "$PRIVATE_KEY") | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          JWT="${HEADER_BASE64}.${PAYLOAD_BASE64}.${SIGNATURE}"
          echo "JWT=${JWT}" >> $GITHUB_ENV

      - name: Run Python script
        run: |
          while IFS= read -r file; do
            python Automation/AKS/Workload-Cluster/main.py "$file"
          done < files.txt

      - name: Commit and push changes using JWT
        run: |
          git checkout -b "feature/${BRANCH_NAME}" || git checkout "feature/${BRANCH_NAME}"
          git pull origin "feature/${BRANCH_NAME}" --rebase
          git config user.name "GitHub App"
          git config user.email "github-app@users.noreply.github.com"
          git add .
          git commit -m "Automated Commit: ${BRANCH_NAME}"
          git push https://x-access-token:${JWT}@github.com/${{ github.repository }} feature/${BRANCH_NAME}

      - name: Create Pull Request using JWT
        run: |
          PR_TITLE="Automated PR: Update generated files"
          PR_BODY="This PR includes the latest generated files from the workflow."
          BASE_BRANCH="main"
          NEW_BRANCH="feature/${BRANCH_NAME}"

          curl -X POST \
            -H "Authorization: Bearer ${JWT}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"'"$PR_TITLE"'","body":"'"$PR_BODY"'","head":"'"$NEW_BRANCH"'","base":"'"$BASE_BRANCH"'"}'



name: Automation

on:
  push:
    branches:
      - main
    paths:
      - "Clusters-Dev/AKS/Input/*.json"

permissions:
  contents: write
  pull-requests: write

jobs:
  trigger_on:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ secrets.OUTPUT_DIR }}
      GITHUB_APP_ID: "${{ secrets.VAM_G_APP_ID }}"
      GITHUB_APP_PRIVATE_KEY: "${{ secrets.VAM_G_PRIVATE_KEY }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Find JSON files
        id: find-json
        run: |
          json_files=$(find Clusters-Dev/AKS/Input/ -name '*.json')
          if [ -z "$json_files" ]; then
            echo "No JSON files found."
            exit 1
          fi
          branch_name=$(basename "$json_files" .json)
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
          echo "$json_files" > files.txt

      - name: Generate JWT for GitHub App Authentication
        id: generate-jwt
        run: |
          PRIVATE_KEY="${{ secrets.VAM_G_PRIVATE_KEY }}"
          APP_ID="${{ secrets.VAM_G_APP_ID }}"
          EXPIRY_TIME=$(date +%s)
          EXPIRY_TIME=$((EXPIRY_TIME + 600)) # JWT valid for 10 minutes
          HEADER='{"alg": "RS256", "typ": "JWT"}'
          PAYLOAD="{\"iat\": ${EXPIRY_TIME}, \"exp\": ${EXPIRY_TIME}, \"iss\": \"${APP_ID}\"}"
          HEADER_BASE64=$(echo -n "$HEADER" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          PAYLOAD_BASE64=$(echo -n "$PAYLOAD" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          SIGNATURE=$(echo -n "${HEADER_BASE64}.${PAYLOAD_BASE64}" | openssl dgst -sha256 -sign <(echo -n "$PRIVATE_KEY") | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          JWT="${HEADER_BASE64}.${PAYLOAD_BASE64}.${SIGNATURE}"
          echo "JWT=${JWT}" >> $GITHUB_ENV

      - name: Get GitHub App Installation Token
        id: get-installation-token
        run: |
          INSTALLATION_ID=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ env.JWT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/app/installations | jq '.[0].id')

          INSTALLATION_TOKEN=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ env.JWT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/app/installations/${INSTALLATION_ID}/access_tokens | jq -r .token)

          echo "INSTALLATION_TOKEN=${INSTALLATION_TOKEN}" >> $GITHUB_ENV

      - name: Run Python script
        run: |
          while IFS= read -r file; do
            python Automation/AKS/Workload-Cluster/main.py "$file"
          done < files.txt

      - name: Commit and push changes using GitHub App Token
        run: |
          git checkout -b "feature/${BRANCH_NAME}" || git checkout "feature/${BRANCH_NAME}"
          git pull origin "feature/${BRANCH_NAME}" --rebase
          git config user.name "GitHub App"
          git config user.email "github-app@users.noreply.github.com"
          git add .
          git commit -m "Automated Commit: ${BRANCH_NAME}"
          git push https://x-access-token:${{ env.INSTALLATION_TOKEN }}@github.com/${{ github.repository }} feature/${BRANCH_NAME}

      - name: Create Pull Request Using JWT and REST API
        run: |
          curl -X POST https://api.github.com/repos/${{ github.repository }}/pulls \
            -H "Authorization: Bearer ${{ env.JWT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "Automated PR: Update generated files",
              "head": "feature/'"${BRANCH_NAME}"'",
              "base": "main",
              "body": "This PR includes the latest generated files from the workflow."
            }'



- name: Commit and push changes
        run: |
          git checkout -b "feature/${BRANCH_NAME}" || git checkout "feature/${BRANCH_NAME}"
          git pull origin "feature/${BRANCH_NAME}" --rebase
          git add .
          git commit -m "Automated Commit: ${BRANCH_NAME}"
          git push origin "feature/${BRANCH_NAME}"

- name: Commit and push changes
        run: |
          git checkout -b "feature/${BRANCH_NAME}"
          git add .
          git commit -m "Automated Commit: ${BRANCH_NAME}"
          git push origin "feature/${BRANCH_NAME}"

      - name: Create Pull Request
        run: |
          gh pr create --base main --head "feature/${BRANCH_NAME}" \
                       --title "Automated PR: Update generated files" \
                       --body "This PR includes the latest generated files from the workflow."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


name: Automation

on:
  push:
    branches:
      - main
    paths:
      - "Clusters-Dev/AKS/Input/*.json"

permissions:
  contents: write
  pull-requests: write

jobs:
  commit_and_pr:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ secrets.OUTPUT_DIR }}
      GITHUB_APP_ID: "${{ secrets.VAM_G_APP_ID }}"
      GITHUB_APP_PRIVATE_KEY: "${{ secrets.VAM_G_PRIVATE_KEY }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Find JSON files
        id: find-json
        run: |
          # Find all JSON files in the directory
          json_files=$(find Clusters-Dev/AKS/Input/ -name '*.json')

          # Check if there are JSON files
          if [ -z "$json_files" ]; then
            echo "No JSON files found."
            exit 1
          fi

          branch_name=$(basename "$json_files" .json)

          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

          # Output the file paths to a file
          echo "$json_files" > files.txt

      - name: Generate JWT
        id: generate-jwt
        run: |
          PRIVATE_KEY=$(echo "${{ secrets.VAM_G_PRIVATE_KEY }}" | sed 's/\\n/\n/g')
          APP_ID="${{ secrets.VAM_G_APP_ID }}"
          CURRENT_TIME=$(date +%s)
          EXPIRY_TIME=$((CURRENT_TIME + 600)) # 10 minutes later

          HEADER='{"alg": "RS256", "typ": "JWT"}'
          PAYLOAD="{\"iat\": ${CURRENT_TIME}, \"exp\": ${EXPIRY_TIME}, \"iss\": \"${APP_ID}\"}"

          HEADER_BASE64=$(echo -n "$HEADER" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          PAYLOAD_BASE64=$(echo -n "$PAYLOAD" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')

          SIGNATURE=$(echo -n "${HEADER_BASE64}.${PAYLOAD_BASE64}" | openssl dgst -sha256 -sign <(echo -n "$PRIVATE_KEY") | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')

          JWT="${HEADER_BASE64}.${PAYLOAD_BASE64}.${SIGNATURE}"

          echo "JWT=${JWT}" >> $GITHUB_ENV
          echo "Generated JWT: ${JWT}"
          echo "::set-output name=token::$JWT"

      - name: Run Python script
        run: |
          # Read the file paths from files.txt and pass them to the Python script
          while IFS= read -r file; do
            python Automation/AKS/Workload-Cluster/main.py "$file"
          done < files.txt

      - name: Configure Git
        run: |
          git config --global user.name "prasad-vm"
          git config --global user.email "prasad.jivane@valuemomentum.com"

      - name: Commit and push changes
        run: |
          git checkout -b feature/$BRANCH_NAME
          git add .
          git commit -m "Automated commit"
          git push

      - name: Create pull request
        run: |
          PR_TITLE="Automated PR"
          PR_BODY="This PR was created automatically via GitHub Actions."
          BASE_BRANCH="main"
          NEW_BRANCH="feature-branch-$(date +%s)"

          git checkout -b $NEW_BRANCH
          git push origin $NEW_BRANCH

          curl -X POST \
            -H "Authorization: Bearer ${JWT}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"'"$PR_TITLE"'","body":"'"$PR_BODY"'","head":"'"$NEW_BRANCH"'","base":"'"$BASE_BRANCH"'"}'



name: Commit and PR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Grants permission to commit and push code
  pull-requests: write  # Grants permission to create pull requests

jobs:
  commit_and_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js (for GitHub App Authentication)
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: |
          npm install -g @octokit/app @octokit/rest

      - name: Authenticate with GitHub App
        id: authenticate
        run: |
          APP_ID=${{ secrets.APP_ID }}
          INSTALLATION_ID=${{ secrets.INSTALLATION_ID }}
          PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}

          export JWT=$(node -e "const { createAppAuth } = require('@octokit/auth-app'); console.log(require('@octokit/auth-app')({ appId: $APP_ID, privateKey: $PRIVATE_KEY }).createJWT())")
          
          export TOKEN=$(curl -X POST -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens | jq -r .token)

          echo "::set-output name=token::$TOKEN"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Make code changes
        run: |
          # Add your commands to make the necessary code changes
          echo "Making changes..."
          # Example:
          echo "New content" >> file.txt

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automated commit"
          git push origin main

      - name: Create pull request
        run: |
          PR_TITLE="Automated PR"
          PR_BODY="This PR was created automatically via GitHub Actions."
          BASE_BRANCH="main"
          NEW_BRANCH="feature-branch-$(date +%s)"

          git checkout -b $NEW_BRANCH
          git push origin $NEW_BRANCH

          curl -X POST \
            -H "Authorization: token ${{ steps.authenticate.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"'"$PR_TITLE"'","body":"'"$PR_BODY"'","head":"'"$NEW_BRANCH"'","base":"'"$BASE_BRANCH"'"}'






- name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install -r requirements.txt
          sudo apt-get install -y jq openssl

      - name: Generate JWT
        id: generate-jwt
        run: |
          PRIVATE_KEY="${{ secrets.GITHUB_APP_PRIVATE_KEY }}"
          APP_ID="${{ secrets.GITHUB_APP_ID }}"
          EXPIRY_TIME=$(date +%s)
          EXPIRY_TIME=$((EXPIRY_TIME + 600)) # 10 minutes later

          HEADER='{"alg": "RS256", "typ": "JWT"}'
          PAYLOAD="{\"iat\": ${EXPIRY_TIME}, \"exp\": ${EXPIRY_TIME}, \"iss\": \"${APP_ID}\"}"

          HEADER_BASE64=$(echo -n "$HEADER" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          PAYLOAD_BASE64=$(echo -n "$PAYLOAD" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')

          SIGNATURE=$(echo -n "${HEADER_BASE64}.${PAYLOAD_BASE64}" | openssl dgst -sha256 -sign <(echo -n "$PRIVATE_KEY") | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')

          JWT="${HEADER_BASE64}.${PAYLOAD_BASE64}.${SIGNATURE}"

          echo "JWT=${JWT}" >> $GITHUB_ENV
          echo "Generated JWT: ${JWT}"

private_key=$(echo "${{ secrets.GITHUB_APP_PRIVATE_KEY }}" | base64 -d)
app_id=$(echo "${{ secrets.GITHUB_APP_ID }}")

if [ -z "$private_key" ] || [ -z "$app_id" ]; then
  echo "Missing GitHub App credentials"
  exit 1
fi



JWT=$(python3 -c '
import jwt
import time
import os

private_key = os.getenv("GITHUB_APP_PRIVATE_KEY")
app_id = os.getenv("GITHUB_APP_ID")

if not private_key or not app_id:
    raise ValueError("Missing environment variables for private key or app ID")

payload = {"iat": int(time.time()), "exp": int(time.time()) + (10 * 60), "iss": app_id}
jwt_token = jwt.encode(payload, private_key, algorithm="RS256")
print(jwt_token)
')

echo "Generated JWT: $JWT"



git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

echo "PR creation response: $PR_RESPONSE"

gh pr create --title "Auto-generated PR for new JSON files" --body "This PR contains changes generated from the new JSON inputs." --base main --head "$BRANCH_NAME"


