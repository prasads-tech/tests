name: Automation Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "Clusters-Dev/AKS/Input/*.json"

jobs:
  trigger_on:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ secrets.OUTPUT_DIR }}
      MAPPING_PATH: ${{ secrets.MAPPING_PATH }}
      TEMPLATE_PATH: ${{ secrets.TEMPLATE_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: List changed JSON files
        id: list_json_files
        run: |
          # Change to the directory containing JSON files
          cd Clusters-Dev/AKS/Input/
          
          # Find the most recently modified or added JSON file
          NEW_JSON_FILE=$(find . -maxdepth 1 -name '*.json' -print0 | xargs -0 stat -c '%Y %n' | sort -nr | head -n 1 | cut -d' ' -f2)
          
          echo "Newly modified or added JSON file: $NEW_JSON_FILE"
          
          # Set the environment variable for GitHub Actions
          if [ -n "$NEW_JSON_FILE" ]; then
            echo "INPUT_PATH=${NEW_JSON_FILE#./}" >> $GITHUB_ENV
          else
            echo "No JSON files detected."
            echo "INPUT_PATH=" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Run main script
        if: env.INPUT_PATH != ''
        run: |
          python Automation/AKS/Workload-Cluster/main.py \
            --input "${INPUT_PATH}" \
            --mapping "${MAPPING_PATH}" \
            --template "${TEMPLATE_PATH}"




name: Automation Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "Clusters-Dev/AKS/Input/*.json"

jobs:
  trigger_on:
    runs-on: ubuntu-latest

    env:
      OUTPUT_DIR: ${{ secrets.OUTPUT_DIR }}
      MAPPING_PATH: ${{ secrets.MAPPING_PATH }}
      TEMPLATE_PATH: ${{ secrets.TEMPLATE_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: List changed JSON files
        id: list_json_files
        run: |
          # Change to the directory containing JSON files
          cd Clusters-Dev/AKS/Input/
          
          # List all JSON files that have been modified or added
          JSON_FILES=$(ls -dt *.json 2>/dev/null || true)
          echo "Detected JSON files: $JSON_FILES"

          # Get the most recently modified JSON file
          NEW_JSON_FILE=$(ls -dt *.json 2>/dev/null | head -n 1 || true)
          echo "Newly modified JSON file: $NEW_JSON_FILE"

          # Set the output for GitHub Actions
          if [ -n "$NEW_JSON_FILE" ]; then
            echo "INPUT_PATH=Clusters-Dev/AKS/Input/$NEW_JSON_FILE" >> $GITHUB_ENV
          else
            echo "No JSON files detected."
            echo "INPUT_PATH=" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Run main script
        if: env.INPUT_PATH != ''
        run: |
          python Automation/AKS/Workload-Cluster/main.py \
            --input "${INPUT_PATH}" \
            --mapping "${MAPPING_PATH}" \
            --template "${TEMPLATE_PATH}"






- name: List changed JSON files
  id: list_json_files
  run: |
    # Fetch the list of changed JSON files
    # Use `git diff` for the most recent commit, but handle initial commits gracefully
    if [ -n "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
      # Fetch the base commit if it's not the initial commit
      BASE_COMMIT=$(git rev-parse HEAD~1 || echo "HEAD")
      JSON_FILES=$(git diff --name-only $BASE_COMMIT HEAD | grep '^Clusters-Dev/AKS/Input/.*\.json$' || true)
    else
      JSON_FILES=""
    fi

    echo "Detected JSON files: $JSON_FILES"

    # Check if any JSON files were detected
    if [ -n "$JSON_FILES" ]; then
      # Get the most recently modified file
      NEW_JSON_FILE=$(echo "$JSON_FILES" | xargs -I {} stat -c '%Y %n' {} | sort -nr | head -n 1 | cut -d' ' -f2)
      echo "Newly modified JSON file: $NEW_JSON_FILE"

      # Set the output for GitHub Actions
      echo "INPUT_PATH=$NEW_JSON_FILE" >> $GITHUB_ENV
    else
      echo "No JSON files detected."
      echo "INPUT_PATH=" >> $GITHUB_ENV
    fi
  shell: bash








- name: List changed JSON files
  id: list_json_files
  run: |
    # Fetch a list of JSON files that have been modified or added in the most recent commit
    JSON_FILES=$(git diff --name-only HEAD^ HEAD | grep '^Clusters-Dev/AKS/Input/.*\.json$' || true)
    echo "Detected JSON files: $JSON_FILES"

    # Check if any JSON files were detected
    if [ -n "$JSON_FILES" ]; then
      # Get the most recently modified file
      NEW_JSON_FILE=$(echo "$JSON_FILES" | xargs -I {} stat -c '%Y %n' {} | sort -nr | head -n 1 | cut -d' ' -f2)
      echo "Newly modified JSON file: $NEW_JSON_FILE"

      # Set the output for GitHub Actions
      echo "INPUT_PATH=$NEW_JSON_FILE" >> $GITHUB_ENV
    else
      echo "No JSON files detected."
      echo "INPUT_PATH=" >> $GITHUB_ENV
    fi
  shell: bash



- name: Create and Push Tag
        if: env.INPUT_PATH != ''
        run: |
          TAG_NAME="trigger-$(date +%Y%m%d%H%M%S)"
          git tag $TAG_NAME
          git push origin $TAG_NAME



on:
  push:
    tags:
      - 'trigger-*'



- name: Commit and Push Manifests
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add ${{ env.OUTPUT_DIR }}/*
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Generated manifests"
            git push
          fi

      - name: Fetch and Check for Changes
        id: check_files
        run: |
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only HEAD origin/main | grep 'Clusters-Dev/AKS/Workload/')
          if [ -n "$CHANGED_FILES" ]; then
            echo "Changed files detected: $CHANGED_FILES"
            echo "FILES_CHANGED=true" >> $GITHUB_ENV
          else
            echo "No changes detected."
            echo "FILES_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Create Trigger File if Changes Detected
        if: env.FILES_CHANGED == 'true'
        run: |
          echo "Changes detected. Creating trigger file..."
          mkdir -p .trigger
          touch .trigger/trigger-file.txt
          git add .trigger/trigger-file.txt
          git commit -m "Add trigger file for second workflow"
          git push



name: Scheduled Check for Trigger File

on:
  schedule:
    - cron: '*/30 * * * *'  # Check every 30 minutes
  workflow_dispatch:

jobs:
  check_trigger_file:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for Trigger File
        id: check_file
        run: |
          if [ -f ".trigger/trigger-file.txt" ]; then
            echo "Trigger file found. Performing actions..."
            echo "TRIGGER_FOUND=true" >> $GITHUB_ENV
          else
            echo "No trigger file found."
            echo "TRIGGER_FOUND=false" >> $GITHUB_ENV
          fi

      - name: Perform Actions
        if: env.TRIGGER_FOUND == 'true'
        run: |
          echo "Performing additional actions based on trigger file..."
          # Insert the commands or scripts you want to run here
          # For example:
          # python scripts/another-script.py
          # Cleanup trigger file after actions
          rm .trigger/trigger-file.txt
          git add .trigger/trigger-file.txt
          git commit -m "Cleanup trigger file after actions"
          git push
