name: Commit and PR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Grants permission to commit and push code
  pull-requests: write  # Grants permission to create pull requests

jobs:
  commit_and_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js (for GitHub App Authentication)
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: |
          npm install -g @octokit/app @octokit/rest

      - name: Authenticate with GitHub App
        id: authenticate
        run: |
          APP_ID=${{ secrets.APP_ID }}
          INSTALLATION_ID=${{ secrets.INSTALLATION_ID }}
          PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}

          export JWT=$(node -e "const { createAppAuth } = require('@octokit/auth-app'); console.log(require('@octokit/auth-app')({ appId: $APP_ID, privateKey: $PRIVATE_KEY }).createJWT())")
          
          export TOKEN=$(curl -X POST -H "Authorization: Bearer $JWT" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens | jq -r .token)

          echo "::set-output name=token::$TOKEN"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Make code changes
        run: |
          # Add your commands to make the necessary code changes
          echo "Making changes..."
          # Example:
          echo "New content" >> file.txt

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Automated commit"
          git push origin main

      - name: Create pull request
        run: |
          PR_TITLE="Automated PR"
          PR_BODY="This PR was created automatically via GitHub Actions."
          BASE_BRANCH="main"
          NEW_BRANCH="feature-branch-$(date +%s)"

          git checkout -b $NEW_BRANCH
          git push origin $NEW_BRANCH

          curl -X POST \
            -H "Authorization: token ${{ steps.authenticate.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{"title":"'"$PR_TITLE"'","body":"'"$PR_BODY"'","head":"'"$NEW_BRANCH"'","base":"'"$BASE_BRANCH"'"}'






- name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install -r requirements.txt
          sudo apt-get install -y jq openssl

      - name: Generate JWT
        id: generate-jwt
        run: |
          PRIVATE_KEY="${{ secrets.GITHUB_APP_PRIVATE_KEY }}"
          APP_ID="${{ secrets.GITHUB_APP_ID }}"
          EXPIRY_TIME=$(date +%s)
          EXPIRY_TIME=$((EXPIRY_TIME + 600)) # 10 minutes later

          HEADER='{"alg": "RS256", "typ": "JWT"}'
          PAYLOAD="{\"iat\": ${EXPIRY_TIME}, \"exp\": ${EXPIRY_TIME}, \"iss\": \"${APP_ID}\"}"

          HEADER_BASE64=$(echo -n "$HEADER" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')
          PAYLOAD_BASE64=$(echo -n "$PAYLOAD" | jq -c . | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')

          SIGNATURE=$(echo -n "${HEADER_BASE64}.${PAYLOAD_BASE64}" | openssl dgst -sha256 -sign <(echo -n "$PRIVATE_KEY") | openssl base64 -e | tr -d '=' | tr '+/' '-_' | tr -d '\n')

          JWT="${HEADER_BASE64}.${PAYLOAD_BASE64}.${SIGNATURE}"

          echo "JWT=${JWT}" >> $GITHUB_ENV
          echo "Generated JWT: ${JWT}"

private_key=$(echo "${{ secrets.GITHUB_APP_PRIVATE_KEY }}" | base64 -d)
app_id=$(echo "${{ secrets.GITHUB_APP_ID }}")

if [ -z "$private_key" ] || [ -z "$app_id" ]; then
  echo "Missing GitHub App credentials"
  exit 1
fi



JWT=$(python3 -c '
import jwt
import time
import os

private_key = os.getenv("GITHUB_APP_PRIVATE_KEY")
app_id = os.getenv("GITHUB_APP_ID")

if not private_key or not app_id:
    raise ValueError("Missing environment variables for private key or app ID")

payload = {"iat": int(time.time()), "exp": int(time.time()) + (10 * 60), "iss": app_id}
jwt_token = jwt.encode(payload, private_key, algorithm="RS256")
print(jwt_token)
')

echo "Generated JWT: $JWT"



git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

echo "PR creation response: $PR_RESPONSE"

gh pr create --title "Auto-generated PR for new JSON files" --body "This PR contains changes generated from the new JSON inputs." --base main --head "$BRANCH_NAME"


